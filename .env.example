# ====================================
# DevFund Manager Configuration
# ====================================
# Copy this file to .env and configure your settings
# Never commit .env to version control!

# ====================================
# MULTISIG WALLET CONFIGURATION
# ====================================

# DevFund multisig address (3... for P2SH)
DEVFUND_ADDRESS=<multisig-address>

# Multisig redeem script (hex format from multisig creation)
# This is generated when you create the 2-of-3 multisig wallet
REDEEM_SCRIPT=<52210242a71da46............b5ffb3eb2d023dbbe952ae>

# Alternative: Load redeem script from file
# REDEEM_SCRIPT_FILE=./redeem_script.hex

# ====================================
# PRIVATE KEYS (WIF FORMAT)
# ====================================
# CRITICAL: These are your private keys for signing transactions
# - Must start with 'N' for Junkcoin mainnet
# - Must be exactly 52 characters long
# - Keep these absolutely secure!

# First signer private key
SIGNER1_WIF=N_PRIVATE_KEY_OF_SIGNER1

# Second signer private key  
SIGNER2_WIF=N_PRIVATE_KEY_OF_SIGNER2

# ====================================
# DISTRIBUTION ADDRESSES
# ====================================
# Destination addresses for fund distribution
# All should be valid Junkcoin addresses (7... for P2PKH, 3... for P2SH)

# Liquidity pool address
LIQUIDITY_ADDRESS=<wallet-address>

# Development team address
DEV_ADDRESS=<wallet-address>

# Marketing budget address
MARKETING_ADDRESS=<wallet-address>

# ====================================
# DISTRIBUTION PERCENTAGES
# ====================================
# Percentage allocation for each category
# MUST sum to exactly 100

LIQUIDITY_PERCENT=50
DEV_PERCENT=25
MARKETING_PERCENT=25

# ====================================
# DISTRIBUTION THRESHOLDS
# ====================================
# Values in satoshis (1 JKC = 100,000,000 satoshis)

# Minimum balance before distribution is triggered
# Example: 1000000000 = 10 JKC
THRESHOLD_BALANCE_SATS=1000000000

# Minimum UTXOs before distribution is triggered
THRESHOLD_UTXO=1

# Minimum balance to always preserve in multisig wallet
# This amount will NEVER be distributed (safety reserve)
# Example: 1000000000 = 10 JKC
MINIMUM_BALANCE_SATS=1000000000

# Minimum amount per distribution (prevents tiny distributions)
# Example: 10000000 = 0.1 JKC
MIN_DISTRIBUTION_AMOUNT=10000000

# ====================================
# TRANSACTION SETTINGS
# ====================================

# Use sendmany for efficient multi-recipient transactions
# true = single transaction to all recipients (recommended)
# false = separate transaction for each recipient
USE_SENDMANY=true

# Transaction fee rate in satoshis per virtual byte
# Higher = faster confirmation, lower = cheaper
# Typical range: 1-50 sats/vB
FEE_RATE=10

# Minimum relay fee in satoshis (network minimum)
MIN_RELAY_FEE=1000

# Dust threshold in satoshis (minimum output value)
DUST_THRESHOLD=546

# ====================================
# API CONFIGURATION
# ====================================
# External APIs for balance checking and broadcasting

# Primary API endpoint
PRIMARY_API=https://junk-api.s3na.xyz

# Fallback API endpoint (used if primary fails)
FALLBACK_API=https://api.junkiewally.xyz

# API request timeout in seconds
API_TIMEOUT=30

# Maximum API retry attempts
MAX_RETRIES=3

# ====================================
# JUNKCOIN DAEMON CONFIGURATION
# ====================================

# Path to junkcoin-cli binary (if not in PATH)
# JUNKCOIN_CLI=/usr/local/bin/junkcoin-cli

# Network (mainnet, testnet, regtest)
NETWORK=mainnet

# RPC connection timeout
RPC_TIMEOUT=60

# ====================================
# LOGGING CONFIGURATION
# ====================================
# Control what gets logged for debugging and monitoring

# Log levels: DEBUG, INFO, WARN, ERROR
# Single level: LOG_LEVEL=INFO
# Multiple levels: LOG_LEVEL=DEBUG,WARN,ERROR
# Examples:
# LOG_LEVEL=INFO                    # Clean production display
# LOG_LEVEL=DEBUG                   # Full debugging
# LOG_LEVEL=INFO,ERROR              # Important info + errors only
# LOG_LEVEL=DEBUG,WARN,ERROR        # Skip info, show debug + problems
LOG_LEVEL=DEBUG,WARN,ERROR

# Log file rotation size (bytes)
LOG_MAX_SIZE=10485760

# Number of log files to keep
LOG_BACKUP_COUNT=5

# ====================================
# MONITOR DAEMON SETTINGS
# ====================================
# Configuration for automated monitoring

# How often to check balance (seconds)
# 300 = 5 minutes, 600 = 10 minutes
MONITOR_CHECK_INTERVAL=300

# How often to consolidate UTXOs (seconds)
# 3600 = 1 hour, 7200 = 2 hours, 0 = disable
MONITOR_CONSOLIDATE_INTERVAL=3600

# Maximum UTXOs before forcing consolidation
MONITOR_MAX_UTXOS=10

# Rate limiting for distributions
MONITOR_MAX_DISTRIBUTIONS_PER_HOUR=1
MONITOR_MAX_DISTRIBUTIONS_PER_DAY=6

# Emergency stop file name
MONITOR_EMERGENCY_STOP_FILE=.emergency_stop

# ====================================
# NOTIFICATION SETTINGS
# ====================================
# Configure alerts and notifications

# Enable notifications for successful distributions
NOTIFY_ON_DISTRIBUTION=true

# Enable notifications for UTXO consolidations
NOTIFY_ON_CONSOLIDATION=true

# Enable notifications for errors
NOTIFY_ON_ERRORS=true

# Webhook URL for notifications (optional)
# WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL

# Email settings (optional)
# EMAIL_SMTP_HOST=smtp.gmail.com
# EMAIL_SMTP_PORT=587
# EMAIL_USER=your-email@gmail.com
# EMAIL_PASSWORD=your-app-password
# EMAIL_TO=admin@yourproject.com

# ====================================
# SECURITY SETTINGS
# ====================================

# Enable additional security checks
SECURITY_VERIFY_ADDRESSES=true

# Require confirmation for large distributions (satoshis)
# Example: 500000000 = 5 JKC
SECURITY_LARGE_AMOUNT_THRESHOLD=500000000

# Maximum transaction size to prevent huge distributions
# Example: 10000000000 = 100 JKC
SECURITY_MAX_TRANSACTION_AMOUNT=10000000000

# Enable transaction dry-run before execution
SECURITY_DRY_RUN_FIRST=false

# ====================================
# DEVELOPMENT & TESTING
# ====================================
# Settings for development and testing

# Enable development mode (more verbose logging)
# DEV_MODE=false

# Test mode (don't actually broadcast transactions)
# TEST_MODE=false

# Custom test addresses for development
# TEST_LIQUIDITY_ADDRESS=7TestLiquidityAddress123456789
# TEST_DEV_ADDRESS=7TestDevAddress123456789
# TEST_MARKETING_ADDRESS=7TestMarketingAddress123456789

# ====================================
# ADVANCED SETTINGS
# ====================================
# Advanced configuration - modify only if you know what you're doing

# Transaction confirmation target (blocks)
CONFIRMATION_TARGET=6

# Maximum inputs per transaction (UTXO limit)
MAX_INPUTS=100

# Maximum transaction size in bytes
MAX_TX_SIZE=100000

# Retry delay between failed attempts (seconds)
RETRY_DELAY=2

# ====================================
# ENVIRONMENT INFORMATION
# ====================================
# Documentation and examples for reference

# Example WIF Key Format:
# - Length: 52 characters
# - Starts with: N (mainnet), 9 or c (testnet)
# - Example: N........

# Example Address Formats:
# - Normal address: 7V768f6woVJ8QKRpfGMMA5pm24ysE6Dh3u (starts with 7)
# - Multisig address: 34P2otqp4hUL4kRoVH74KpyrBdkrqZM18n (starts with 3)

# Satoshi Conversion:
# - 1 JKC = 100,000,000 satoshis
# - 0.1 JKC = 10,000,000 satoshis
# - 0.01 JKC = 1,000,000 satoshis
# - 0.001 JKC = 100,000 satoshis

# Example Redeem Script (2-of-3 multisig):
# 52 = OP_2 (require 2 signatures)
# 21 = push 33 bytes (compressed public key)
# [33 byte public key 1]
# 21 = push 33 bytes (compressed public key)
# [33 byte public key 2]  
# 21 = push 33 bytes (compressed public key)
# [33 byte public key 3]
# 53 = OP_3 (3 total keys)
# ae = OP_CHECKMULTISIG

# ====================================
# SECURITY REMINDERS
# ====================================
# - Never commit .env to version control
# - Set file permissions: chmod 600 .env
# - Backup private keys securely offline
# - Use test environment before production
# - Monitor all transactions and logs
# - Keep emergency stop procedures ready
# - Verify all addresses before deployment
